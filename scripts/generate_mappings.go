//go:build ignore
// +build ignore

package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log/slog"
	"net/http"
	"os"
	"regexp"
	"strings"
)

func main() {
	semantic, err := getMappings("https://raw.githubusercontent.com/Semantic-Org/Semantic-UI/master/src/themes/default/elements/icon.overrides", semanticRegex)
	if err != nil {
		panic(err)
	}
	fontawesome, err := getMappings("https://maxcdn.bootstrapcdn.com/font-awesome/latest/css/font-awesome.css", fontAwesomeRegex)
	if err != nil {
		panic(err)
	}
	classMappings := make(map[string]string, len(semantic))
	for k, v := range semantic {
		if equivalent, ok := fontawesome[k]; ok {
			classMappings[equivalent] = v
		}
	}
	_, err = json.MarshalIndent(classMappings, "", "\t")
	if err != nil {
		panic(err)
	}

	f, err := os.Create("modules/fa-semantic-mappings/mappings.go")
	defer f.Close()
	if err != nil {
		panic(err)
	}
	f.Write([]byte(fileHeader))
	fmt.Fprintf(f, "var Mappings = %#v\n", classMappings)
	slog.Info("Generated mappings.go")
}

const fileHeader = `// THIS FILE WAS AUTOMATICALLY GENERATED BY A TOOL
// Use ` + "`go generate`" + ` to generate this.

package fasuimappings

// Mappings is a map containing the Semantic UI icon equivalent of FontAwesome
// icons. 
`

var semanticRegex = regexp.MustCompile(`i\.([\.a-zA-Z0-9-]+):before { content: "(.{5})"; }`)
var fontAwesomeRegex = regexp.MustCompile(`.([a-zA-Z0-9-]+):before {
  content: "(.{5})";
}`)

func getMappings(url string, regex *regexp.Regexp) (map[string]string, error) {
	ov, err := http.Get(url)
	if err != nil {
		return nil, err
	}
	b, err := ioutil.ReadAll(ov.Body)
	if err != nil {
		return nil, err
	}
	strs := regex.FindAllStringSubmatch(string(b), -1)
	m := make(map[string]string, len(strs))
	for _, strs := range strs {
		m[strs[2]] = strings.Replace(strs[1], ".", " ", -1)
	}
	return m, nil
}
